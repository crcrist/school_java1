// Exercise 13.1
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("below are the cards in the deck:\n");

        for (int i = 0; i < cards.length; i++) {
          sb.append(cards[i]);


        if (i < cards.length - 1) {
          sb.append("\n");
        }
      }


        return sb.toString();
    }

// Exercise 13.2
    private static int randomInt(int low, int high) {
      int range = high - low + 1;

      int randomInRange = random.nextInt(range);

      return low + randomInRange;
    }

    private void swapCards(int i, int j) {
        Card temp = cards[i];

        cards[i] = cards[j];

        cards[j] = temp;
    }

    public void shuffle() {
      
        for (int i = cards.length - 1; i > 0; i--) {
            int j = randomInt(0, i);
            swapCards(i, j);
        }
    }


// Exercise 13.3
    private int indexLowest(int low, int high) {
      int lowestIndex = low;
      
      for (int i = low + 1; i <= high; i++) {
          int compareValue = cards[i].compareTo(cards[lowestIndex]);
          if (compareValue == -1) {
          lowestIndex = i;
          }
      }
      
      return lowestIndex;
    }

    public void selectionSort() {
      
        for  (int i = 0; i < cards.length - 1; i++) {
            int lowestIndex = indexLowest(i, cards.length-1);
            
            swapCards(i, lowestIndex);       
        }
    }

    private static Deck merge(Deck d1, Deck d2) {
        Deck result = new Deck(d1.getCards().length + d2.getCards().length);

        int i = 0;
        int j = 0;
        int k = 0;

        while (i < d1.getCards().length && j < d2.getCards().length) {
            int lowestValue = d1.getCards()[i].compareTo(d2.getCards()[j]);
            
            if (lowestValue == -1) {
                result.getCards()[k] = d1.getCards()[i];
                i++;
                k++;
            }
            else {
                result.getCards()[k] = d2.getCards()[j];
                k++;
                j++;
            }

        }
        while (i < d1.getCards().length) {
            result.getCards()[k] = d1.getCards()[i];
            i++;
            k++;
        }
        
        while (j < d2.getCards().length) {
            result.getCards()[k] = d2.getCards()[j];
            j++;
            k++;
        }

        return result;
    }
