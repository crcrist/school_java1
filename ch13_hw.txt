// Exercise 13.1
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("below are the cards in the deck:\n");

        for (int i = 0; i < cards.length; i++) {
          sb.append(cards[i]);


        if (i < cards.length - 1) {
          sb.append("\n");
        }
      }


        return sb.toString();
    }

// Exercise 13.2
    private static int randomInt(int low, int high) {
      int range = high - low + 1;

      int randomInRange = random.nextInt(range);

      return low + randomInRange;
    }

    private void swapCards(int i, int j) {
        Card temp = cards[i];

        cards[i] = cards[j];

        cards[j] = temp;
    }

    public void shuffle() {
      
        for (int i = cards.length - 1; i > 0; i--) {
            int j = randomInt(0, i);
            swapCards(i, j);
        }
    }


// Exercise 13.3
    private int indexLowest(int low, int high) {
      int lowestIndex = low;
      
      for (int i = low + 1; i <= high; i++) {
          int compareValue = cards[i].compareTo(cards[lowestIndex]);
          if (compareValue == -1) {
          lowestIndex = i;
          }
      }
      
      return lowestIndex;
    }

    public void selectionSort() {
      
        for  (int i = 0; i < cards.length - 1; i++) {
            int lowestIndex = indexLowest(i, cards.length-1);
            
            swapCards(i, lowestIndex);       
        }
    }

    private static Deck merge(Deck d1, Deck d2) {
        Deck result = new Deck(d1.getCards().length + d2.getCards().length);

        int i = 0;
        int j = 0;
        int k = 0;

        while (i < d1.getCards().length && j < d2.getCards().length) {
            int lowestValue = d1.getCards()[i].compareTo(d2.getCards()[j]);
            
            if (lowestValue == -1) {
                result.getCards()[k] = d1.getCards()[i];
                i++;
                k++;
            }
            else {
                result.getCards()[k] = d2.getCards()[j];
                k++;
                j++;
            }

        }
        while (i < d1.getCards().length) {
            result.getCards()[k] = d1.getCards()[i];
            i++;
            k++;
        }
        
        while (j < d2.getCards().length) {
            result.getCards()[k] = d2.getCards()[j];
            j++;
            k++;
        }

        return result;
    }

    public Deck almostMergeSort() {
        Deck deck1 = subdeck(0, 25);
        Deck deck2 = subdeck(26, 51);
        
        deck1.selectionSort();
        deck2.selectionSort();

        Deck result = merge(deck1, deck2);
        return result;
    }

    public Deck mergeSort() {
        if (this.cards.length <= 1) {
            return this;
        }

        int mid = this.cards.length / 2;

        Deck deck1 = this.subdeck(0, mid - 1);
        Deck deck2 = this.subdeck(mid, this.cards.length - 1);
        
        deck1 = deck1.mergeSort();
        deck2 = deck2.mergeSort();

        return merge(deck1, deck2);
    }

// Exercise 13.4

    private void insert(Card card, int i) {
        // i is the position where the card should be inserted
        // Start at position i and move the card backward until it's in the right position
        int j = i;
        // Keep moving backward as long as we haven't reached the beginning
        // and the current card is less than the one before it
        while (j > 0 && card.compareTo(cards[j-1]) == -1) {
            // Shift the card at j-1 one position to the right
            cards[j] = cards[j-1];
            j--;
        }
        // Place the card in its correct position
        cards[j] = card;
      

    }

    public void insertionSort() {
        // start from the second card (index 1)
        for (int i = 1; i < cards.length; i++) {
            Card current = cards[i];
            // insert the current card into its proper position
            insert(current, i);
        }
    }

// Exercise 13.5

/**
 * Simulates a simple card game.
 */
public class War {

    public static void main(String[] args) {

        // create and shuffle the deck
        Deck deck = new Deck();
        deck.shuffle();

        // divide the deck into piles
        Pile p1 = new Pile();
        p1.addDeck(deck.subdeck(0, 25));
        Pile p2 = new Pile();
        p2.addDeck(deck.subdeck(26, 51));

        // while both piles are not empty
        while (!p1.isEmpty() && !p2.isEmpty()) {
            Card c1 = p1.popCard();
            Card c2 = p2.popCard();

            // compare the cards
            int diff = c1.getRank() - c2.getRank();
            if (diff > 0) {
                p1.addCard(c1);
                p1.addCard(c2);
            } else if (diff < 0) {
                p2.addCard(c1);
                p2.addCard(c2);
            } else {
                // it's a tie...draw four more cards
                Pile warPile = new Pile(); // hold cards in the war
                warPile.addCard(c1);      // add the tied cards to the war pile
                warPile.addCard(c2);
                
                // handle the war (tie)
                while (diff == 0) {
                    System.out.println("War!");
                    
                    // if either player doesn't have enough cards
                    if (p1.size() < 4 || p2.size() < 4) {
                        // one player doesn't have enough cards to complete the war
                        System.out.println("Player " + (p1.size() < 4 ? "2" : "1") + " wins because the other player ran out of cards!");

                        return;
                    }
                    
                    // draw 3 cards from each player and add to the war pile
                    for (int i = 0; i < 3; i++) {
                        warPile.addCard(p1.popCard());
                        warPile.addCard(p2.popCard());
                    }

                    // draw one more card from each player to compare
                    c1 = p1.popCard();
                    c2 = p2.popCard();
                    warPile.addCard(c1);
                    warPile.addCard(c2);

                    // compare the new cards
                    diff = c1.getRank() - c2.getRank();
                    
                    // if the tie is still ocurring, we'll loop and do it again
                }
                
                // award cards to the winner of the war
                if (diff > 0) {
                    // player 1 wins the war
                    while (!warPile.isEmpty()) {
                        p1.addCard(warPile.popCard());
                    }
                } else {
                  
                    while (!warPile.isEmpty()) {
                        p2.addCard(warPile.popCard());
                    }
                }
            }
            
        }

        // display the winner
        if (p2.isEmpty()) {
            System.out.println("Player 1 wins!");
        } else {
            System.out.println("Player 2 wins!");
        }
    }

}
