// Exercise 11.1
public Time increment(double seconds) {
    Time result = new Time();
    
    double totalSeconds = this.hour * 3600 + this.minute * 60 + this.second + seconds;
    
    // Use division and remainder to calculate hours, minutes, and seconds
    result.hour = (int) (totalSeconds / 3600) % 24;
    result.minute = (int) ((totalSeconds % 3600) / 60);
    result.second = totalSeconds % 60;
    
    return result;
}

// Exercise 11.2
public class Tile {
    // Instance variables
    private char letter;
    private int value;
    
    // Default constructor
    public Tile() {
        this.letter = ' ';
        this.value = 0;
    }
    
    // Constructor with parameters
    public Tile(char letter, int value) {
        this.letter = letter;
        this.value = value;
    }

    public char getLetter() {
      return this.letter;
    }
    
    public int getValue() {
      return this.value;
    }

    public void setLetter(char letter) {
      this.letter = letter;
    }

    public void setValue(int value) {
      this.value = value;
    }
    
    // print tile method
    public static void printTile(Tile tile) {
        System.out.print(tile.letter);
        System.out.print(tile.value);
    }
    
    // Method to display time in a readable format
    public String toString() {
        return String.format("%s,%d", this.letter, this.value);
    }

    public boolean equals(Tile tile) {
        if (this == tile) return true;

        if (tile == null || getClass() != tile.getClass()) return false;

        Tile other = (Tile) tile;
        return this.letter == other.letter && this.value == other.value;
    }
    
    public static void main(String[] args) {

        Tile tile1 = new Tile('Z', 10);
        Tile tile2 = new Tile('D', 3);
        Tile tile3 = new Tile('Z', 10);
        Tile.printTile(tile1);
        Tile.printTile(tile2);
        Tile.printTile(tile3);
        System.out.println("\nare the tiles equal? - " + tile1.equals(tile2));
        System.out.println("\nare the tiles equal? - " + tile1.equals(tile3));

  }
}

// Exercise 11.3
public class Date {
    // Instance variables
    private int year;
    private int month;
    private int day;
    
    // Default constructor
    public Date() {
        this.year = 0;
        this.month = 0;
        this.day = 0;
    }
    
    // Constructor with parameters
    public Date(int year, int month, int day) {
        this.year = year;
        this.month = month;
        this.day = day;
    }

    public int getYear() {
      return this.year;
    }
    
    public int getMonth() {
      return this.month;
    }

    public int getDay() {
      return this.day;
    }

    public void setYear(int year) {
      this.year = year;
    }

    public void setMonth(int month) {
      this.month = month;
    }

     public void setDay(int day) {
      this.day = day;
    }
   
    // print date method
    public static void printDate(Date date) {
      System.out.println(date.year + "-" + date.month + "-" + date.day);
    }
    
    // Method to display time in a readable format
    public String toString() {
        return String.format("%d-%d-%d", this.year, this.month, this.day);
    }

    public boolean equals(Date date) {
        if (this == date) return true;

        if (date == null || getClass() != date.getClass()) return false;

        Date other = (Date) date;
        return this.year == other.year && this.month == other.month && this.day == other.day;
    }
    
    public static void main(String[] args) {

        Date date1 = new Date(1999, 12, 16);
        Date date2 = new Date(1999, 12, 16);
        Date date3 = new Date(2001, 10, 28);
        Date.printDate(date1);
        Date.printDate(date2);
        Date.printDate(date3);
        System.out.println("\nare the dates equal? - " + date1.equals(date2));
        System.out.println("\nare the dates equal? - " + date1.equals(date3));

  }
}
// Exercise 11.4
public class Rational {
    // Instance variables
    private int numerator;
    private int denominator;
    
    // Default constructor
    public Rational() {
        this.numerator = 0;
        this.denominator = 1;
    }

    public Rational(int numerator, int denominator) {
        this.numerator = numerator;
        this.denominator = denominator;
    }
    
    public int getNumerator() {
      return this.numerator;
    }
    
    public int getDenominator() {
      return this.denominator;
    }
    public void setNumerator(int numerator) {
      this.numerator = numerator;
    }

    public void setDenominator(int denominator) {
      this.denominator = denominator;
    }

    // print rational method
    public static void printRational(Rational rational) {
      System.out.println("numerator: " + rational.numerator + "\n" + "denominator: " + rational.denominator);
    }
    
    // Method to display time in a readable format
    public String toString() {
        return String.format("numerator: %d, denominator: %d", this.numerator, this.denominator);
    }

    public boolean equals(Rational rational) {
        if (this == rational) return true;

        if (rational == null || getClass() != rational.getClass()) return false;

        Rational other = (Rational) rational;
        return this.numerator == other.numerator && this.denominator == other.denominator;
    }
   
    public void negate() {
      this.numerator = this.numerator * -1;
    }

    public void invert() {
      int temp = this.numerator;
      this.numerator = this.denominator;
      this.denominator = temp;
    }

    public double toDouble() {
      return (double) numerator/denominator;
    }

    // Method to reduce a rational number to lowest terms
    public Rational reduce() {
        // Find the GCD of numerator and denominator
        int a = Math.abs(numerator);
        int b = Math.abs(denominator);
        
        // Euclidean algorithm for GCD
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        
        // a is now the GCD
        int sign = (denominator < 0) ? -1 : 1;
        return new Rational(sign * numerator / a, Math.abs(denominator) / a);
    }

    public Rational add(Rational other) {
        // Find the new numerator and denominator
        int newNumerator = (this.numerator * other.denominator) + 
                           (other.numerator * this.denominator);
        int newDenominator = this.denominator * other.denominator;
        
        // Create a new Rational with the result
        Rational result = new Rational(newNumerator, newDenominator);
        
        // Reduce the result and return it
        return result.reduce();
}

    public static void main(String[] args) {

        Rational rational1 = new Rational();
        rational1.setNumerator(8);
        rational1.setDenominator(2);
        Rational.printRational(rational1);
        String rationalAsString = rational1.toString();
        System.out.println("calling rational1 toString: " + rationalAsString);
        
        Rational rational2 = new Rational(10, 2);
        rational2.negate();
        rational2.invert();
        Rational.printRational(rational2);
        rational2.toDouble();
        System.out.println(rational2);
       

        Rational rational3 = new Rational(1, 2);
        System.out.println(rational3 + " as a double is: " + rational3.toDouble());

        

        Rational reduced = rational1.reduce();
        System.out.println("Reduced: " + reduced);

        Rational sum = rational3.add(rational2);
        System.out.println(rational3 + " + " + rational2 + " = " + sum);

  }
}

