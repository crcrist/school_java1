// Exercise 6.1
1. 
i | n
10 | 10
5 | 10
6 | 10
3 | 10
4 | 10
2 | 10
1 | 10
(exit loop) | 10
2. the output would be the left side of the coulum
3. yes the loop will always terminate, as the odd values are incremented to become even. In the previous example of the Collatz conjecture, that 3n+1 rule does not simply increment to just make the number even.

// Exercise 6.2
public class squareRoot {

  public static void main(String[] args) {
      double result = squareRoot(9);
      System.out.println(result);  
  }

  public static double squareRoot(double n) {
      double x = n / 2;
      double y = 1.0;
      double i = 1.0;

      while (i > 0.0001) {
          y = (x + n/x)/2;
          i = Math.abs(x-y);
          x = y;
        }
      return y;
    
   }
}

// Exercise 6.3

  public static double gauss (double x, double n) {
    // parameters are x (input to the equation
    // n is the number of terms to include
    
    double sum = 0;
    double term = 1;
    double xSquared = x * x;

      for (int i = 0; i < n; i++) {
        sum += term;
        term = term * (-xSquared) / (i + 1);
      }

      return sum;
    
   }

// Exercise 6.4
  public static boolean abcdarian(String s) {
      for (int i = 0; i < s.length() - 1; i++) {
         if (s.charAt(i) > s.charAt(i + 1)) {
            return false;
         }
      }
      return true;
   }

// Exercise 6.5
  public static boolean isDoubloon(String word) {
    word = word.toLowerCase();
    
    for (int i = 0; i < word.length(); i++) {
        char currentChar = word.charAt(i);
        
        int count = 0;
        for (int j = 0; j < word.length(); j++) {
            if (word.charAt(j) == currentChar) {
                count++;
            }
        }
        
        if (count != 2) {
            return false;
        }
    }
    
    return true;
  }

// Exercise 6.6

  public static boolean isScrable(String word, String letters) {
    word = word.toLowerCase();
    letters = letters.toLowerCase();
    
    char[] lettersArray = letters.toCharArray();

    for (int i = 0; i < word.length(); i++) {
        char currentChar = word.charAt(i);
        boolean found = false;

        for (int j = 0; j < letters.length(); j++) {
            if (lettersArray[j] == currentChar) {
                lettersArray[j] = '*';
                found = true;
                break;
            }
        }
   if (!found ) {
      return false;
      }
    }
    return true;
  }

